import synapseclient
import numpy as np
import os
import json
import sys
import traceback
syn = synapseclient.Synapse()
syn.login()

EVALUATION_ID=1876290
LEADERBOARD_ID= 55678
SURVIVALDATA={'GBM':'syn1710370', 'KIRC':'syn1710303', 'LUSC':'syn1710384', 'OV':'syn1710363'}
TESTLABELS       ={'GBM':'syn1714083', 'KIRC':'syn1714090', 'LUSC':'syn1714096', 'OV':'syn1714102'}

evaluation=syn.getEvaluation(EVALUATION_ID)
#leaderboard = syn.getWiki(evaluation, LEADERBOARD_ID)


# Data Type  | GBM        | KIRC       | LUSC       |  OV       
# test       |syn1714083  | syn1714090 | syn1714096 | syn1714102 
# train      |syn1714087 	| syn1714093 | syn1714099 | syn1714105 
# CNV        |syn1710366 	| syn1710287 | syn1710378 | syn1710316 
# RPPA       |            | syn1710306 | syn1710386 | syn1710314 
# mRNA       |syn1710372 	| syn1710293 | syn1710382 | syn1710361 
# methylation|syn1710374 	| syn1710289 |            | syn1710320
# miRNA      |syn1710368 	| syn1710291 | syn1710380 | syn1710359
# Survival   |syn1710370 	| syn1710303 | syn1710384 | syn1710363 
# clinical   |syn1715822 	| syn1715824 | syn1715826 | syn1715828 


def match(seq1, seq2):
    """Finds the index locations of seq1 in seq2"""
    return [ np.nonzero(seq2==x)[0][0] for x in seq1  if x in seq2 ]


def readFile(path, strip=None):
    with open(path) as f:
        data = np.asarray([l.strip(strip).split('\t') for l in f])
    return data


try:
    #get_ipython().magic(u'load_ext rmagic')
    #get_ipython().magic(u'R require(survival); require(randomSurvivalForest); require(survcomp)')
    %load_ext rmagic
    %R require(survival); require(randomSurvivalForest); require(survcomp)

    #Modify score of submissions
    for submission, status in  syn.getSubmissionBundles(evaluation, status='RECEIVED'):
        print submission.id, submission.entityId, submission.versionNumber#, json.loads(submission.entityBundleJSON)['entityType']
        annots = dict()
        #To support our old style locationables
        if json.loads(submission.entityBundleJSON)['entityType'] == 'org.sagebionetworks.repo.model.Data':
            ent = syn.get(submission['entityId']) #, version = submission['versionNumber'])
            submission.entity = ent
            submission.filePath = os.path.join(ent.cacheDir, ent.files[0])
        else:
            submission = syn.getSubmission(submission)
        try:
            data=readFile(submission.filePath).astype(np.float)
            cancer=submission.entity.get('cancer', [''])[0]
            dataType=submission.entity.get('dataType', [''])[0]
        except:
            print '\tFAILED'
            status.status = 'INVALID'
            annots['error'] = 'Unable to read file for %s' %submission.id
            status.annotations=synapseclient.annotations.to_submission_status_annotations(annots, is_private=False)
            syn.store(status)
            continue
        if cancer not in SURVIVALDATA.keys():
            annots['error'] = ('The submitted entity must have a cancer annotation '
                               'specified as one of %s' % str(SURVIVALDATA.keys()))
            status.status = 'INVALID'
            status.annotations=synapseclient.annotations.to_submission_status_annotations(annots, is_private=False)
            syn.store(status)
            continue
        #Perform scoring
        testLabels = readFile(syn.get(TESTLABELS[cancer]).path)
        survival=readFile(syn.get(SURVIVALDATA[cancer]).path, '\n')
        concordanceIndexes=[]
        for bootstrapIdx, patientLabels in enumerate(testLabels.T):
            #Determine Extract the training and testing sets of one bootstrap
            testIdx = match(patientLabels, survival[:,0])

            #Verify that the labels are the same
            assert np.all(patientLabels==survival[testIdx,0])

            survTime = survival[testIdx,1].astype(np.int)
            survStatus = survival[testIdx,2].astype(np.int)

            #Extract results for specific boostrap
            if data.shape[1]==100:
                predictedResponse = data[:,bootstrapIdx]
            else:
                predictedResponse = data[bootstrapIdx,:]

            %Rpush predictedResponse survStatus survTime
            %R -o concordance concordance <- concordance.index(predictedResponse, survTime, survStatus)$c.index
            concordanceIndexes.append(concordance)
        print '\t', np.mean(concordanceIndexes)
        annots['score'] = np.mean(concordanceIndexes)
        annots['std'] = np.std(concordanceIndexes)
        annots['cancer'] = cancer
        annots['dataType'] =  dataType
        annots['error']=''
        status.annotations=synapseclient.annotations.to_submission_status_annotations(annots, is_private=False)
        status.status='SCORED'
        syn.store(status)
except Exception, e:
    traceback.print_exc(file=sys.stderr)
    os._exit(3)

#Clean up and remove all of the evaluations and leaderboard location
#syn.delete(evaluation)


#${supertable?path=%2Fevaluation%2Fsubmission%2Fquery%3Fquery%3Dselect%2B%2A%2Bfrom%2Bevaluation%5F1876290&paging=true&queryTableResults=true&showIfLoggedInOnly=false&pageSize=25&showRowNumber=false&jsonResultsKeyName=rows&columnConfig0=none%2CScore%2Cscore%3B%2CNONE&columnConfig1=none%2CSubmission%2CentityId%3B%2CNONE&columnConfig2=userid%2CSubmitter%2CuserId%3B%2CNONE&columnConfig3=none%2CSubmission Name%2Cname%3B%2CNONE&columnConfig4=none%2CScore %2528mean%2529%2Cscore%3B%2CNONE&columnConfig5=none%2C%252B%252F%252D std%2Cstd%3B%2CNONE&columnConfig6=none%2CCancer%2Ccancer%3B%2CNONE&columnConfig7=none%2Cinput Data Type%2CdataType%3B%2CNONE&columnConfig8=synapseid%2Csubmission%2CentityId%3B%2CNONE&columnConfig9=epochdate%2Cdate%2CmodifiedOn%3B%2CDESC&columnConfig10=none%2CError Message%2Cerror%3B%2CNONE}
